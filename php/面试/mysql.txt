1.整数类型
类型|范围|存储大小|默认长度
TINYINT -2^15 (-32,768) ~ 2^15 – 1 (32,767) 1字节 4
SMALLINT -2^15 (-32,768) ~ 2^15 – 1 (32,767)  2字节 6
MEDIUMINT 有符号-8388608到8388607 无符号的范围是0到16777215 3字节 9
INT -2^31 (-2,147,483,648) - 2^31 ~ 1 (2,147,483,647) 4字节 11
BIGINT -2^63 (-9223372036854775808) ~ 2^63-1 (9223372036854775807) 8字节 20
属性：UNSIGNED
长度设置无区别，只有使用填充0(ZEROFILL),才有用区别


-------------------------------------------------

2.实数类型
类型|范围|存储大小|默认长度
FLOAT -3.4E+38 和 3.4E+38 4字节 24 支持标准浮点进行近似计算
DOUBLE 同上
DECIMAL 可存储比BIGINT还大的整数;可存精确小数;

-------------------------------------------------

3.字符型
VARCHAR 可变长度，比定长省空间,列长度小于255字节，用1个字节表示，否则两个,超出截断
CHAR 定长，空格填充定长，适合很短的(比VARCHAR更有效率)，或值都接近长度的;经常变的CHAR比VARCHAR好(不易产生碎片);
TEXT 查询会使用临时表，导致严重的性能开销
BLOB

-------------------------------------------------

ENUM 枚举 尽量不用数字，易混乱
-------------------------------------------------
4.时间
尽量用TIMESTAMP，比DATETIME空间效率高
存微秒用bigint
-------------------------------------------------

5.列属性
AUTO_INCREMENT 自动递增
DEFAULT 默认值
NOT NULL 不为空
ZEROFILL 填充0
-------------------------------------------------
6.基操
mysql -u -p -h -P
\G \c \q \s \h \d

-------------------------------------------------
7.表引擎
InnoDB 事务型，性能优秀，数据存储在共享表空间，可通过配置分开，对主键查询性能高于其他类型引擎;从磁盘读取数据时自动在内存构建hash索引，插入数据时自动构建插入缓冲区;支持热备份;安全恢复;行级锁;外键;优先使用这个
MyISAN 表引擎
5.1版本前的默认引擎
全文索引，压缩，空间函数
不支持事务，行级锁，安全恢复
表存储在两个文件，MYD和MYI
设计简单，某些场景下性能好
其他引擎 CSV Archive
-------------------------------------------------
8.锁机制
读锁 共享的，不堵塞，可一起读取一个资源，互不干扰
写锁 排他的，会阻塞其他的写锁和读锁，只允许一个人进行写入，防止其他用户读取正在写入的
锁粒度
表锁 系统性能开销最小，锁定整张表，MYISAM用表锁
行锁  最大程度地支持并发处理,最大的锁开销，InnoDB实现行级锁
-------------------------------------------------
9.事务
INNODB
-------------------------------------------------
10.存储过程
封装
-------------------------------------------------
11.触发器
-------------------------------------------------
12.索引
原则：出现在WHERE，ON里的；基数越大效果越好，字符串索引，定个前缀长度，省索引空间；根据情况创复合索引；不要建太多索引；主键尽可能短的数据类型，省空间
大大减少服务器需要扫描的数据量
帮助服务器避免排序和临时表
将随机I/O变顺序I/O
提高查询速度，降低写的速度，占用磁盘
大表，索引的代价增大,分区
普通索引 无任何限制
唯一索引 唯一 一表可多个
主键索引 唯一，不能为空，一表只能一个；外键，防止数据不一致
组合索引 多个列组合一起创建索引
外键 INNODB才能，完整性和实现级联操作
全文索引 MYISAM 只能对英文
注意事项：复合索引遵循前缀原则KEY(a,b,c) where 带a再到b;
LIKE 不能在前，%x%，可用全文索引
column is null 可以使用索引
如果用索引比全部扫描更慢，就放弃索引
字符串一定要 带引号"100"
复合索引：：
-------------------------------------------------
13.语句
关联更新
UPDATE A,B SET A.c1 = B.c1,A.c2 = B.c2 WHERE A.id = B.id AND b.age > 50
UPDATE A INNER JOIN B ON A.id = B.id SET A.c1 = B.c1,A.c2 = B.c2 WHERE b.age > 50
关联查询
交叉连接
SELECT * FROM A,B,C
SELECT * FROM A CROSS JOIN B CROSS JOIN C
内连接
SELECT * FROM A,B WHERE A.id = B.id
SELECT * FROM A INNER JOIN B ON A.id = B.id
外连接
RIGHT JOIN 右表为主，左无就NULL
LEFT JOIN 左表为主，，右无就NULL
联合查询
UNION 列数要相等，相同记录行合并
全连接 不支持 用 left join union right join 联合使用
嵌套查询 效率低
-------------------------------------------------
14.查询优化
show profile = 1;
show profiles  查执行时间
show profile for query 1006(这是id)
show processlist
explain 分析单条sql语句
1.太多行或太多列， （field 指定 和 LIMIT）,重复查询相同的可缓存
2.扫描大量数据只返回少数行，用索引覆盖扫描，或改变数据库和表结构，（冗余来加快速度，空间换时间）
3.优化长难得查询语句，尽可能少查询，有时将大查询分解成小查询
4.优化count(字段),myisam无where的count(*)很快，用explain查询近似值代替，增加汇总表，用缓存
5.优化关联查询，ON和using列上有索引，group by 和order by只有一个表的列（才能使用索引）
group by 和 distinct 用索引优化，用标识列分组效率高，不需要排序 用 order by null
LIMIT 分页  查询上次的最大ID，下次根据该ID来查询
-------------------------------------------------
15.扩展
分区表
分库分表
主从复制：数据分布，负载均衡，高可用和故障切换，升级测试
-------------------------------------------------
16.安全
用预处理语句防SQL注入
特殊字符转义
查询错误信息不要返回用户，错误记录到日志
PHP尽量使用PDO（预处理语句）
定期备份
不给root权限，合理分配权限
关闭远程访问数据库的权限
修改root口令，不用默认口令，使用较复杂的口令
删除多余的用户
改变root用户名称
限制一般用户浏览其他库
限制用户对数据文件的访问权限
-------------------------------------------------
-------------------------------------------------